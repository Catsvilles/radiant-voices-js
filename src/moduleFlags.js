exports.fromUint32 = value => ({
  // user-modifiable
  mute: !!(value & 0x80),
  solo: !!(value & 0x100),
  bypass: !!(value & 0x4000),
  // internal
  exists: !!(value & 0x1),
  output: !!(value & 0x2),
  generator: !!(value & 0x8),
  effect: !!(value & 0x10),
  initialized: !!(value & 0x40),
  getSpeedChanges: !!(value & 0x400),
  hidden: !!(value & 0x800),
  multi: !!(value & 0x1000),
  dontFillInput: !!(value & 0x2000),
  useMutex: !!(value & 0x8000),
  ignoreMute: !!(value & 0x10000),
  noScopeBuffer: !!(value & 0x20000),
  outputIsEmpty: !!(value & 0x40000),
  open: !!(value & 0x80000),
  getPlayCommands: !!(value & 0x100000),
  getRenderSetupCommands: !!(value & 0x200000),
  feedback: !!(value & 0x400000),
  getStopCommands: !!(value & 0x800000),
})

exports.toUint32 = ({
  mute,
  solo,
  bypass,
  exists,
  output,
  generator,
  effect,
  initialized,
  getSpeedChanges,
  hidden,
  multi,
  dontFillInput,
  useMutex,
  ignoreMute,
  noScopeBuffer,
  outputIsEmpty,
  open,
  getPlayCommands,
  getRenderSetupCommands,
  feedback,
  getStopCommands,
}) => (
  [
    !!mute * 0x80,
    !!solo * 0x100,
    !!bypass * 0x4000,
    !!exists * 0x1,
    !!output * 0x2,
    !!generator * 0x8,
    !!effect * 0x10,
    !!initialized * 0x40,
    !!getSpeedChanges * 0x400,
    !!hidden * 0x800,
    !!multi * 0x1000,
    !!dontFillInput * 0x2000,
    !!useMutex * 0x8000,
    !!ignoreMute * 0x10000,
    !!noScopeBuffer * 0x20000,
    !!outputIsEmpty * 0x40000,
    !!open * 0x80000,
    !!getPlayCommands * 0x100000,
    !!getRenderSetupCommands * 0x200000,
    !!feedback * 0x400000,
    !!getStopCommands * 0x800000,
  ].reduce((x, y) => x + y)
)
